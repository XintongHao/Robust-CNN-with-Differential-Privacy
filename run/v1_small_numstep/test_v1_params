steps_num       = 500
eval_data_size  = 100

image_size      = 28
n_channels      = 1
num_classes     = 10
relu_leakiness  = 0.0
lrn_rate        = 0.01
lrn_rte_changes = [30000]
lrn_rte_vals    = [0.01]
if FLAGS.mode == 'train':
    batch_size = 128
    n_draws    = 1
elif FLAGS.mode == 'eval':
    batch_size = 25
    n_draws    = 2000


L = 0.1
hps = models.params.HParams(
        name_prefix="",
        batch_size=batch_size,
        num_classes=num_classes,
        image_size=image_size,
        n_channels=n_channels,
        lrn_rate=lrn_rate,
        lrn_rte_changes=lrn_rte_changes,
        lrn_rte_vals=lrn_rte_vals,
        num_residual_units=4,
        use_bottleneck=False,
        weight_decay_rate=0.0002,
        relu_leakiness=relu_leakiness,
        optimizer='mom',
        image_standardization=False,
        n_draws=n_draws,
        
        dp_epsilon=1.0,
        dp_delta=0.05,
        
        robustness_confidence_proba=0.05,
        attack_norm_bound=L,
        attack_norm='l2',
        sensitivity_norm='l2',
        sensitivity_control_scheme='bound',  # bound or optimize
        
        noise_after_n_layers=1,
        
        layer_sensitivity_bounds=['l2_l2'],
        noise_after_activation=True,
        parseval_loops=10,
        parseval_step=0.0003,
        steps_num=steps_num,
        eval_data_size=eval_data_size,
)


attack_params = attacks.params.AttackParams(
    restarts=1,
    n_draws_attack=20,
    n_draws_eval=500,
    attack_norm='l2',
    max_attack_size=5,
    
    num_examples=100,
#            num_examples=1000,
    attack_methodolody=attacks.name_from_module(atk),
    targeted=False,
    
    sgd_iterations=20,
#            sgd_iterations=100,
    use_softmax=True
)